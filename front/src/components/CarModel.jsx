/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/assets/models/ToyCar-red.glb -o src/components/CarModel.jsx -r public/ 
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'

export function CarModel(props) {
  const modelPath = props.index === 0 ? '/assets/models/ToyCar-blue.glb' : '/assets/models/ToyCar-red.glb';
  const { nodes, materials } = useGLTF(modelPath);
  
  if(props.index === 0 && nodes.Formula) {
    return (
      <group {...props} dispose={null}>
        <mesh castShadow receiveShadow geometry={nodes.Formula.geometry} material={materials.toy_Cars_color_01} position={[0, -0.1, 0]} rotation={[Math.PI / 2, 0, Math.PI]} scale={0.0017}>
        <mesh geometry={nodes.BreakLight_L.geometry} material={materials['red-l']} position={[44, -175, -71]} scale={150}/>
        <mesh geometry={nodes.BreakLight_R.geometry} material={materials['red-r']} position={[-44, -175, -71]} scale={150}/>
        </mesh>
      </group>
    )
  } else if (nodes.Formula) {
    return (
      <group {...props} dispose={null}>
        <mesh castShadow receiveShadow geometry={nodes.Formula.geometry} material={materials.toy_Cars_color_01} position={[0, -0.1, 0]} rotation={[Math.PI / 2, 0, Math.PI]} scale={0.0017}>
        <mesh geometry={nodes.BreakLight_L.geometry} material={materials['red-l']} position={[44, -175, -71]} scale={150}/>
        <mesh geometry={nodes.BreakLight_R.geometry} material={materials['red-r']} position={[-44, -175, -71]} scale={150}/>
        </mesh>
      </group>
    )
  }
}

useGLTF.preload('/assets/models/ToyCar-blue.glb')
useGLTF.preload('/assets/models/ToyCar-red.glb')
