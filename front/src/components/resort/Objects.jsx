/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public\assets\models\Objects.glb -o src/components/resort/Objects.jsx -r public 
*/

import React, { useRef } from 'react'
import { meshBounds, useGLTF } from '@react-three/drei'

export function TrashCan(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <group position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh raycast ={meshBounds} castShadow geometry={nodes.cap_1.geometry} material={materials.Trash_cans} position={[-63, -59.451, -172.053]} />
        <mesh raycast ={meshBounds} castShadow geometry={nodes.cap_2.geometry} material={materials.Trash_cans} position={[63, -59.451, -172.053]} />
        <mesh raycast ={meshBounds} castShadow geometry={nodes.Trash_can_large.geometry} material={materials.Trash_cans} />
      </group>
    </group>

  )
}

export function WallClumb(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow geometry={nodes.Wall_clumb.geometry} material={materials.Wall_clumb} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>

  )
}

export function Umbrella(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh castShadow raycast ={meshBounds} geometry={nodes.Umbrella.geometry} material={materials.Umbrella_Chair_Table} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>

  )
}
export function TrashBag(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
        <mesh raycast ={meshBounds} castShadow geometry={nodes.Trash_bag.geometry} material={materials.Trash_bag} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>

  )
}
export function TrafficLight(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} geometry={nodes.Traffic_Light_1.geometry} material={materials.Traffic_Light} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh raycast ={meshBounds} castShadow geometry={nodes.Green.geometry} material={materials.Light_Green} />
        <mesh raycast ={meshBounds} castShadow geometry={nodes.Pedestrian_Green.geometry} material={materials.Light_P_Green} />
        <mesh raycast ={meshBounds}castShadow geometry={nodes.Pedestrian_Red.geometry} material={materials.Light_P_Red} />
        <mesh raycast ={meshBounds} castShadow geometry={nodes.Red.geometry} material={materials.Light_Red} />
        <mesh raycast ={meshBounds} castShadow geometry={nodes.Sign_1__1_.geometry} material={materials.Road_Signs} position={[-5, 0, -378.2]} rotation={[0, 0, Math.PI / 2]} scale={[1, 0.45, 1]} />
        <mesh raycast ={meshBounds} castShadow geometry={nodes.Sign_1__2_.geometry} material={materials.Road_Signs} position={[5, 0, -378.2]} rotation={[0, 0, -Math.PI / 2]} scale={[1, 0.45, 1]} />
        <mesh raycast ={meshBounds} castShadow geometry={nodes.Sign_2__1_.geometry} material={materials.Road_Signs} position={[-2.5, -40.1, -180]} rotation={[0, 0, Math.PI / 2]} scale={[1, 0.45, 1]} />
        <mesh raycast ={meshBounds} castShadow geometry={nodes.Sign_2__2_.geometry} material={materials.Road_Signs} position={[2.5, -40.1, -180]} rotation={[0, 0, -Math.PI / 2]} scale={[1, 0.45, 1]} />
        <mesh raycast ={meshBounds} castShadow geometry={nodes.Yellow.geometry} material={materials.Light_Yellow} />
      </mesh>

    </group>

  )
}

export function UmbrellaChairTable(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh castShadow geometry={nodes.Table.geometry} material={materials.Umbrella_Chair_Table} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>

  )
}

export function SignPizza(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh castShadow geometry={nodes.Sign_pizza.geometry} material={materials.Signboards} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>

  )
}
export function SignOpen(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh castShadow geometry={nodes.Sign_open.geometry} material={materials.Signboards} position={[0, 0 ,0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>

  )
}
export function SignHotel2(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh castShadow geometry={nodes.Sign_hotel_2.geometry} material={materials.Signboards} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>

  )
}
export function SignHotel1(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh castShadow geometry={nodes.Sign_hotel_1.geometry} material={materials.Signboards} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>

  )
}
export function SignCoffee(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh castShadow geometry={nodes.Sign_coffee_house.geometry} material={materials.Signboards} position={[0, 0 ,0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>

  )
}
export function RoadPillarCaution(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow receiveShadow geometry={nodes.Road_Pillar_2.geometry} material={materials.Traffic_Light} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh raycast ={meshBounds} castShadow geometry={nodes.Sign_1.geometry} material={materials.Road_Signs} position={[0, 0, 0]} scale={[1, 0.5, 1]} />
      </mesh>

    </group>
  )
}
export function RoadPillarStop(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
     <mesh raycast ={meshBounds} castShadow receiveShadow geometry={nodes.Road_Pillar_1.geometry} material={materials.Traffic_Light} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh raycast ={meshBounds} castShadow geometry={nodes.Sign_3.geometry} material={materials.Road_Signs} position={[0, 0, 0]} scale={[1, 0.5, 1]} />
      </mesh>
    </group>
  )
}
export function RoadPillarCross(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
     <mesh raycast ={meshBounds} castShadow receiveShadow geometry={nodes.Road_Pillar_3.geometry} material={materials.Traffic_Light} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh raycast ={meshBounds} castShadow geometry={nodes.Sign_2.geometry} material={materials.Road_Signs} position={[0, 0, 0]} scale={[1, 0.5, 1]} />
      </mesh>
    </group>
  )
}
export function RoadPillarRed(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow receiveShadow geometry={nodes.Road_Pillar_4.geometry} material={materials.Traffic_Light} position={[0, 0,0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh raycast ={meshBounds} castShadow geometry={nodes.Sign_4.geometry} material={materials.Road_Signs} position={[0, 0, 0]} rotation={[-Math.PI, 0, -Math.PI]} scale={[1, 0.5, 1]} />
      </mesh>
    </group>
  )
}
export function RoadPillar(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow geometry={nodes.Road_Pillar.geometry} material={materials.Traffic_Light} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}
export function PizzaBox(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh castShadow geometry={nodes.Pizza_Box.geometry} material={materials.Pizza_Box} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}      
export function Bottle(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow geometry={nodes.Bottle.geometry} material={materials.Garbage} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}
export function Bench(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
  <group {...props} dispose={null}>
    <mesh raycast ={meshBounds} castShadow geometry={nodes.Bench.geometry} material={materials.Bench} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />    
  </group>
  )
} 
export function Cup(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
  <group {...props} dispose={null}>
    <mesh raycast ={meshBounds} castShadow geometry={nodes.Cup.geometry} material={materials.Garbage} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
  </group>
  )
}  
export function Pillar(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
  <group {...props} dispose={null}>
    <mesh raycast ={meshBounds} castShadow geometry={nodes.Pillar_1.geometry} material={materials.Fence} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
  </group>
  )
} 
export function Newspaper(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
  <group {...props} dispose={null}>
    <mesh raycast ={meshBounds} castShadow geometry={nodes.Newspaper.geometry} material={materials.Garbage} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
  </group>
  )
} 
export function Mailbox(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
  <group {...props} dispose={null}>
    <mesh raycast ={meshBounds} castShadow geometry={nodes.Mailbox.geometry} material={materials.Mailbox} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
  </group>
  )
}

export function Lighter(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
  <group {...props} dispose={null}>
    <mesh raycast ={meshBounds} castShadow geometry={nodes.Lighter.geometry} material={materials.Lighter_hydrant} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
  </group>
  )
} 
export function Hydrant(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
  <group {...props} dispose={null}>
    <mesh raycast ={meshBounds} castShadow geometry={nodes.Hydrant.geometry} material={materials.Lighter_hydrant} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
  </group>
  )
}    
export function Hatch(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
  <group {...props} dispose={null}>
    <mesh raycast ={meshBounds} castShadow geometry={nodes.Hatch.geometry} material={materials.Border_road_props} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
  </group>
  )
}   
export function Fence2(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow geometry={nodes.Fence_2.geometry} material={materials.Fence} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}  
export function Fence1(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow geometry={nodes.Fence_1.geometry} material={materials.Fence} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}
export function Cone(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow geometry={nodes.Cone.geometry} material={materials.Border_road_props} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}
export function Clumb_empty_2(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow geometry={nodes.Clumb_empty_2.geometry} material={materials.Clumbs} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}
export function Clumb_empty_1(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow geometry={nodes.Clumb_empty_1.geometry} material={materials.Clumbs} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}
export function ChalkBoard(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow geometry={nodes.Chalk_board.geometry} material={materials.Chalk_board} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}
export function Chair(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow geometry={nodes.Chair.geometry} material={materials.Umbrella_Chair_Table} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}  
export function Can(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow geometry={nodes.Can.geometry} material={materials.Garbage} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}
export function Box(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow geometry={nodes.Box.geometry} material={materials.Garbage} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}
export function Block(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow geometry={nodes.Block.geometry} material={materials.Border_road_props} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}
export function Bin(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow geometry={nodes.Bin.geometry} material={materials.Trash_cans} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}
export function Antenna(props) {
  const { nodes, materials } = useGLTF('/assets/models/Objects.glb')
  return (
    <group {...props} dispose={null}>
      <mesh raycast ={meshBounds} castShadow geometry={nodes.Antenna.geometry} material={materials.Antenna} position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />

    </group>
  )
}         

useGLTF.preload('/assets/models/Objects.glb')