/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/assets/models/ModularRuinsPack.glb -o src/components/Ruins.jsx -r public 
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import ColliderBox from '../../ColliderBox'

export function Wall(props) {
  const { nodes, materials } = useGLTF('/assets/models/ModularRuinsPack.glb')
  return (
    <group {...props} dispose={null}>
      <ColliderBox position={[0, 1, -0.11]} scale={[2, 0.29, 2]} rotation ={[-Math.PI/2, 0, 0]}></ColliderBox>
      <group  rotation={[-Math.PI / 2, 0, 0]} scale={100}>
        <mesh geometry={nodes.Wall_1.geometry} material={materials.Highlights} />
        <mesh geometry={nodes.Wall_2.geometry} material={materials.Main} />
      </group>
    </group>
  )
}

export function Floor(props) {
    const { nodes, materials } = useGLTF('/assets/models/ModularRuinsPack.glb')
    return (
      <group {...props} dispose={null}>
        <ColliderBox position={[0, 0, -0.11]} scale={[2, 0.29, 2]} rotation ={[0, 0, 0]}></ColliderBox>
        <group position={[0, 0, 0]} rotation={[Math.PI / 2, 0, 0]} scale={[100, 100, 5.973]}>
            <mesh geometry={nodes.Floor_Standard_1.geometry} material={materials.Highlights} />
            <mesh geometry={nodes.Floor_Standard_2.geometry} material={materials.Main} />
      </group>
      </group>
    )
}

export function Floor2(props) {
    const { nodes, materials } = useGLTF('/assets/models/ModularRuinsPack.glb')
    return (
      <group {...props} dispose={null}>
        <ColliderBox position={[0, 1, -0.11]} scale={[2, 0.29, 2]} rotation ={[0, 0, 0]}></ColliderBox>
        <group position={[7.54, 0, 28]} rotation={[-Math.PI / 2, 0, 0]} scale={[100, 100, 5.973]}>
            <mesh geometry={nodes.Floor_Diamond_1.geometry} material={materials.Highlights} />
            <mesh geometry={nodes.Floor_Diamond_2.geometry} material={materials.Main} />
        </group>
      </group>
    )
}




useGLTF.preload('/assets/models/ModularRuinsPack.glb')
